In software engineering, a design pattern is a general reusable solution to a commonly occurring problem within a given
context in software design. A design pattern is not a finished design that can be transformed directly into source or
machine code. It is a description or template for how to solve a problem that can be used in many different situations.
Patterns are formalized best practices that the programmer can use to solve common problems when designing an
application or system. Object-oriented design patterns typically show relationships and interactions between
classes or objects, without specifying the final application classes or objects that are involved. Patterns that
imply object-orientation or, more generally, mutable state, are not as applicable in functional programming languages.
A design pattern in architecture and computer science is a formal way of documenting a solution to a design problem in
a particular field of expertise. The idea was introduced by the architect Christopher Alexander in the field of
architecture and has been adapted for various other disciplines, including computer science. An organized collection
of design patterns that relate to a particular field is called a pattern language.
The elements of this language are entities called patterns. Each pattern describes a problem that occurs over and
over again in our environment, and then describes the core of the solution to that problem, in such a way that you
can use this solution a million times over, without ever doing it the same way twice. â€” Christopher Alexander
The usefulness of speaking of patterns is to have a common terminology for discussing the situations designers already
see over and over.