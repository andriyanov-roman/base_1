fefsdsdf
dsfdsf
dsf
ds
fds
fsdfdsferstregr
TM FeedХабрахабрМегамозгGeektimesТостерBrainstorageФрилансим Конкурс Lumia 532Server 2003 End of LifeБесплатный доступ к VDS
avatarASuprun
карма
6,0
6 голосов
рейтинг
0,6
Профиль
Публикации (1)
Комментарии (6)
Избранное
16 сентября 2014 в 19:24
Справочник по Java Collections Framework из песочницы
JAVA*
Данная публикация не является полным разбором или анализом (не покрывает пакет java.util.concurrent). Это, скорее, справочник, который поможет начинающим разработчикам понять ключевые отличия одних коллекций от других, а более опытным разработчикам просто освежить материал в памяти.

Что такое Java Collections Framework?

Java Collection Framework — иерархия интерфейсов и их реализаций, которая является частью JDK и позволяет разработчику пользоваться большим количесвом структур данных из «коробки».

Базовые понятия

На вершине иерархии в Java Collection Framework располагаются 2 интерфейса: Collection и Map. Эти интерфейсы разделяют все коллекции, входящие во фреймворк на две части по типу хранения данных: простые последовательные наборы элементов и наборы пар «ключ — значение» (словари).

image

Collection — этот интерфейс находится в составе JDK c версии 1.2 и определяет основные методы работы с простыми наборами элементов, которые будут общими для всех его реализаций (например size(), isEmpty(), add(E e) и др.). Интерфейс был слегка доработан с приходом дженериков в Java 1.5. Так же в версии Java 8 было добавлено несколько новых метода для работы с лямбдами (такие как stream(), parallelStream(), removeIf(Predicate<? super E> filter) и др.).

Важно также отметить, что эти медоды были реализованы непосредственно в интерфейсе как default-медоды.

Map. Данный интерфейс также находится в составе JDK c версии 1.2 и предоставляет разработчику базовые методы для работы с данными вида «ключ — значение».Также как и Collection, он был дополнен дженериками в версии Java 1.5 и в версии Java 8 появились дополнительные методы для работы с лямбдами, а также методы, которые зачастую реализовались в логике приложения (getOrDefault(Object key, V defaultValue), putIfAbsent(K key, V value)).

Интерфейс Map [doc]



Hashtable — реализация такой структуры данных, как хэш-таблица. Она не позволяет использовать null в качестве значения или ключа. Эта коллекция была реализована раньше, чем Java Collection Framework, но в последствии была включена в его состав. Как и другие коллекции из Java 1.0, Hashtable является синхронизированной (почти все методы помечены как synchronized). Из-за этой особенности у неё имеются существенные проблемы с производительностью и, начиная с Java 1.2, в большинстве случаев рекомендуется использовать другие реализации интерфейса Map ввиду отсутствия у них синхронизации.

HashMap — коллекция является альтернативой Hashtable. Двумя основными отличиями от Hashtable являются то, что HashMap не синхронизирована и HashMap позволяет использовать null как в качестве ключа, так и значения. Так же как и Hashtable, данная коллекция не является упорядоченной: порядок хранения элементов зависит от хэш-функции. Добавление элемента выполняется за константное время O(1), но время удаления, получения зависит от распределения хэш-функции. В идеале является константным, но может быть и линейным O(n). Более подробную информацию о HashMap можно почитать здесь (актуально для Java < 8).

LinkedHashMap — это упорядоченная реализация хэш-таблицы. Здесь, в отличии от HashMap, порядок итерирования равен порядку добавления элементов. Данная особенность достигается благодаря двунаправленным связям между элементами (аналогично LinkedList). Но это преимущество имеет также и недостаток — увеличение памяти, которое занимет коллекция. Более подробная информация изложена в этой статье.

TreeMap — реализация Map основанная на красно-чёрных деревьях. Как и LinkedHashMap является упорядоченной. По-умолчанию, коллекция сортируется по ключам с использованием принципа "natural ordering", но это поведение может быть настроено под конкретную задачу при помощи объекта Comparator, которые указывается в качестве параметра при создании объекта TreeMap.

WeakHashMap — реализация хэш-таблицы, которая организована с использованием weak references. Другими словами, Garbage Collector автоматически удалит элемент из коллекции при следующей сборке мусора, если на ключ этого элеметна нет жёстких ссылок.

Интерфейс List [doc]



Реализации этого интерфейса представляют собой упорядоченные коллекции. Кроме того, разработчику предоставляется возможность доступа к элементам коллекции по индексу и по значению (так как реализации позволяют хранить дубликаты, результатом поиска по значению будет первое найденное вхождение).

Vector — реализация динамического массива объектов. Позволяет хранить любые данные, включая null в качестве элемента. Vector появился в JDK версии Java 1.0, но как и Hashtable, эту коллекцию не рекомендуется использовать, если не требуется достижения потокобезопасности. Потому как в Vector, в отличии от других реализаций List, все операции с данными являются синхронизированными. В качестве альтернативы часто применяется аналог — ArrayList.

Stack — данная коллекция является расширением коллекции Vector. Была добавлена в Java 1.0 как реализация стека LIFO (last-in-first-out). Является частично синхронизированной коллекцией (кроме метода добавления push()). После добавления в Java 1.6 интерфейса Deque, рекомендуется использовать именно реализации этого интерфейса, например ArrayDeque.

ArrayList — как и Vector является реализацией динамического массива объектов. Позволяет хранить любые данные, включая null в качестве элемента. Как можно догадаться из названия, его реализация основана на обычном массиве. Данную реализацию следует применять, если в процессе работы с коллекцией предплагается частое обращение к элементам по индексу. Из-за особенностей реализации поиндексное обращение к элементам выполняется за константное время O(1). Но данную коллекцию рекомендуется избегать, если требуется частое удаление/добавление элементов в середину коллекции. Подробный анализ и описание можно почитать в этом хабратопике.

LinkedList — ещё одина реализация List. Позволяет хранить любые данные, включая null. Особенностью реализации данной коллекции является то, что в её основе лежит двунаправленный связный список (каждый элемент имеет ссылку на предыдущий и следующий). Благодаря этому, добавление и удаление из середины, доступ по индексу, значению происходит за линейное время O(n), а из начала и конца за константное O(1). Так же, ввиду реализации, данную коллекцию можно использовать как стек или очередь. Для этого в ней реализованы соответсвующие методы. На Хабре также есть статья с подробным анализом и описанием этой коллекции.

Интерфейс Set [doc]



Представляет собой неупорядоченную коллекцию, которая не может содержать дублирующиеся данные. Является программной моделью математического понятия «множество».

HashSet — реализация интерфейса Set, базирующаяся на HashMap. Внутри использует объект HashMap для хранения данных. В качестве ключа используется добавляемый элемент, а в качестве значения — объект-пустышка (new Object()). Из-за особенностей реализации порядок элементов не гарантируется при добавлении.

LinkedHashSet — отличается от HashSet только тем, что в основе лежит LinkedHashMap вместо HashSet. Благодаря этому отличию порядок элементов при обходе коллекции является идентичным порядку добавления элементов.

TreeSet — аналогично другим классам-реализациям интерфейса Set содержит в себе объект NavigableMap, что и обуславливает его поведение. Предоставляет возможность управлять порядком элементов в коллекции при помощи объекта Comparator, либо сохраняет элементы с использованием "natural ordering".

Интерфейс Queue [doc]



Этот интерфейс описывает коллекции с предопределённым способом вставки и извлечения элементов, а именно — очереди FIFO (first-in-first-out). Помимо методов, определённых в интерфейсе Collection, определяет дополнительные методы для извлечения и добавления элементов в очередь. Большинство реализаций данного интерфейса находится в пакете java.util.concurrent и подробно рассматриваются в данном обзоре.

PriorityQueue — является единственной прямой реализацией интерфейса Queue (была добавлена, как и интерфейс Queue, в Java 1.5), не считая класса LinkedList, который так же реализует этот интерфейс, но был реализован намного раньше. Особенностью данной очереди является возможность управления порядком элементов. По-умолчанию, элементы сортируются с использованием «natural ordering», но это поведение может быть переопределено при помощи объекта Comparator, который задаётся при создании очереди. Данная коллекция не поддерживает null в качестве элементов.

ArrayDeque — реализация интерфейса Deque, который расширяет интерфейс Queue методами, позволяющими реализовать конструкцию вида LIFO (last-in-first-out). Интерфейс Deque и реализация ArrayDeque были добавлены в Java 1.6. Эта коллекция представляет собой реализацию с использованием массивов, подобно ArrayList, но не позволяет обращаться к элементам по индексу и хранение null. Как заявлено в документации, коллекция работает быстрее чем Stack, если используется как LIFO коллекция, а также быстрее чем LinkedList, если используется как FIFO.

Заключение

Java Collections Framework содержит большое количество различных структур данных, доступных в JDK «из коробки», которые в большинстве случаев покрывают все потребности при реализации логики приложения. Сравнение временных характеристик основных коллекций, которые зачастую используются в разработке приложений приведено в таблице:



При необходимости, разработчик может создать собственную реализацию, расширив или переопределив существующую логику, либо создав свою собственную реализацию подходящего интерфейса с нуля. Также существует некоторое количество готовых решений, которые являются альтернативой или дополнением к Java Collections Framework. Наиболее популярными являются Google Guava и Commons Collections.

В дополнение, хотелось бы указать в качестве дополнительного материала, ссылку на обзор пакета java.util.concurrent. Который является отличным дополнением к изложенному материалу.
java, collections
+18 49778
493ASuprun 0,6
Похожие публикации

Изобретаем велосипед на Java — пишем свой Framework (DI, ORM, MVC and etc) (36)
Java Garbage Collection на облачном хостинге Infobox Jelastic (3)
Библиотека Trove. Коллекции примитивных типов в Java (40)
Java собеседование. Коллекции vs null (47)
Google Collections LIbrary 1.0 final (11)
Комментарии (21)

0 AMDev17 сентября 2014 в 01:51 (комментарий был изменён)#
Очень похоже на главу из книги с ссылками на офф. документацию. Можно уточнить источник(и), кроме статей с хабра?
0 ASuprun17 сентября 2014 в 12:34#??
Дело в том, что все источники, которые были использованы в статье — указаны. Статья самописная и копипаста не имеет.
–1 asm0dey17 сентября 2014 в 06:51#
А почему про Stream не написали?
0 maseal17 сентября 2014 в 07:05#??
а какое отношение Stream имеет к Java Collections Framework?
0 asm0dey17 сентября 2014 в 07:06#??
Ну как бы все коллекции от него наследуются. И почти все самые важные методы работы с коллекциями содержатся именно там.
0 mrstrictly17 сентября 2014 в 08:57#??
Допустим, вы говорите про тот самый Stream, который появился в Java 8. Можете показать хотя бы одну коллекцию, которая наследуется от него?
0 asm0dey17 сентября 2014 в 09:52#??
Блин, и правда мой косяк. Они же все просто имеют метод stream(). Но мне кажется не рассказывать про stream когда говоришь про коллекции уже как-то неправильно.
0 bimeg17 сентября 2014 в 09:55#??
Стримы это вполне отдельная автономная сущность. Для них коллекции это не более чем источник (коих еще очень много кроме коллекций). Так что лучше рассказывать отдельно.
+1 intet17 сентября 2014 в 09:33#
Еще для начинающих разработчиков следовало бы уточнить затраты по памяти/времени на типичные операции.
0 intet17 сентября 2014 в 09:45#??
Извиняюсь не сразу заметил, что часть характеристик вы указали, но лучше бы увидеть единую таблицу.
+2 ASuprun17 сентября 2014 в 12:39#??
Да, я тоже думаю, что таблица не помешает. Как раз сейчас работаю над этим
0 sphinks17 сентября 2014 в 12:19 (комментарий был изменён)#
Пара неточностей, как мне кажется:

HashSet — реализация интерфейса Set, базирующаяся на HashTable. Внутри использует объект HashMap для хранения данных.

Не очень понял почему базируется на HashTable, если под капотом HashMap?

LinkedHashSet — отличается от HashSet только тем, что в основе лежит LinkedHashSet вместо HashSet.

Наверно, здесь имелось в виду, что в основе лежит LinkedHashMap вместо HashMap?
0 ASuprun17 сентября 2014 в 12:32#??
Спасибо за правку. Действительно немного напутал. Исправил
0 Suvitruf17 сентября 2014 в 12:39#
Лучше почитать статьи товарища tarzan82, у него более подробно про все коллекции:
LinkedHashMap
ArrayList
LinkedList
HashMap
0 ASuprun17 сентября 2014 в 12:41#??
Как было сказано в начале, статья — не является подробным обзором, а лишь краткий справочник. И, как Вы могли заметить, я указал эти статьи в качестве дополнительного материала для более детального ознакомления
0 Suvitruf17 сентября 2014 в 12:43#??
Да, не заметил сразу. Извиняюсь.
0 bujakaboom17 сентября 2014 в 15:13#
Также в статье можно было бы показать какие улучшения получили HashMap в java8.
0 ASuprun17 сентября 2014 в 15:38#??
Всё дело в том, что статья и так получилась довольно объёмная. А нововведения и изменения Collections Framework в Java 8 — это материал для другой вполне самодостаточной статьи. Тем более что целью статьи было всё же создать лаконичный справочник-памятку, а не подробный анализ.
0 bujakaboom17 сентября 2014 в 16:33#??
Но Вы приводите ссылку на более раннюю статью, в которой написано, что на один bucket приходится цепочка элементов. Важный момент в java8 — это то, что теперь bucket ссылается на бинарное дерево. и мне кажется, это стоит упоминания.
0 leventov17 сентября 2014 в 17:05#??
Биндерево только когда длинна цепочки превышает 8, что при адекватном лоад факторе и вменяемой реализации хеш-кода не происходит никогда.
0 ASuprun17 сентября 2014 в 17:24#??
Ну то что в Java 8 bucket — бинарное дерево — не совсем верно. Потому как деревом он становится только в том случае, если его размер больше TREEIFY_THRESHOLD. Причём данный процесс оборотный, то есть если по каким-то причинам bucket становится снова меньше, то он возвращается к «плоской» структуре (односвязный список). Но, так как в данной статье не объясняется внутреннее устройство коллекций, то для того чтобы связно изложить этот материал, прийдётся углубляться, что не помещается в рамки этого поста.

Но Ваше замечание действительно достойное внимания, потому считаю, что лучшим решением будет уточнить актуальность ссылки. Что и сделано.
Только зарегистрированные пользователи могут оставлять комментарии. Войдите, пожалуйста.
Что обсуждают?

Запись скринкастов в Linux (Ubuntu) через ПО и avconv (18)
Почему в России так мало committers в крупные open source проекты (33)
Как мы строим волшебный SSD-хостинг в Нидерландах и США с новыми принципами тарификации и работы, действительно ли он волшебен? (10)
Расследование одного взлома или как быстро и просто потратить миллиард (79)
Нейроинтерфейсы: от фотобумаги до нейропыли (29)
Изоморфные приложения. Взгляд в будущее с React (7)
Wargaming: тыл — фронту! Узнай что у твоего танка под капотом. Python Видео с DevConf 2014 (24)
Azure Pack в Облакотеке: зачем и как мы это сделали (3)
Что бы вы выбрали? Упражнение по выбору приложения из App Store (7)
Разработка из Университета Алабамы поможет распространению пассивных систем охлаждения для серверов и обычных ПК (31)
AdRiver
Популярное за сутки
Как определить дубликаты картинок с помощью PHP 12
Готовимся к собеседованию по PHP: ключевое слово «static» 32
Что вы хотели знать про Android Animation Framework, но боялись спросить
Нативная реализация OmniDirectional теней в DirectX11
Разбираемся с поддержкой x64 в WPE Pro 3
Разработка из Университета Алабамы поможет распространению пассивных систем охлаждения для серверов и обычных ПК 31
Установка OpenStreetMap Nominatim для нахождения широты и долготы по введенному адресу 10
Что бы вы выбрали? Упражнение по выбору приложения из App Store 7
Почему в России так мало committers в крупные open source проекты 33
все лучшие
Лучшее на Geektimes
Грабли, на которые мы успели наступить 31
Самые крутые IT-музеи мира. Часть 1 2
Киберпокаяние: хакеры стоявшие за вирусами-вымогателями, раскаялись в своих действиях 9
Как я с лёгкостью сделал винтовку AR-15, которую невозможно отследить 20
«Получаем» инвайт для голосового ассистента Hound 5
Канадские учёные испытали лекарство от гриппа, которое не убивает вирус, а лечит пациента 17
«Белтелеком» собирается монетизировать «железный занавес» 9
Команда проекта Rosetta предложила закончить миссию, посадив аппарат на комету в следующем году 5
Умные часы в связке с умным домом: взлетит или не взлетит? 3
Microsoft разрешила ЕС проверить исходный код своих продуктов на бэкдоры 13
все публикации
Лучшее на Мегамозге
Методики персонализации контента
История одной IT-компании, которая так и не пришла к успеху (Ч.3) 4
Доход «Одноклассников» от продажи подарков и наклеек за 2014 год превысил 4 миллиарда рублей 1
Минфин отказался от налогов для Apple и Google
Максим Гришаков занял место коммерческого директора «Яндекса», которое пустовало с осени прошлого года
Опыт участия «Polyglot» в конкурсе стартапов
Минкомсвязи ищет разработчиков национальной мобильной ОС 5
Wargaming запустил туристический сервис Wgtravel.ru 1
Кровавый гэмблинг (партнерские программы)
«Яндекс» обвинили в спекуляции на брендах популярных радиостанций
все публикации
Вопросы по теме
Как подключить protobuf к Java?
Почему мой говнокод не слушается моего велосипеда?
Как реализовать переключение между Activity в Navigation Drawer (+ проблемы после его добавления)?
Как начать программировать под Android без знаний Java?
Spring MVC приложение и два доменых имени или два веб приложения, но взаимодествующие?
Web приложение от Android разработчика?
Можно ли писать на Java под Windows?
Регулярные выражения?
Почему это java говнокод?
Динамические таблицы в primefaces?
Какие существуют скриптовые языки кроме lua? Существуют ли в природе языки реализующие JSR 223? Что можете порекомендовать?
Кириллица в регулярных выражениях?
Как в Android спарсить ответ USSD запроса, с помощью logcat?
Для чего и как использовать Terminal в Intellij Idea?
Почему не работает Java клиент RabbitMQ на локальной машине?
Java GUI - актуальная технология?
Как использовать объект из другого класса?
Как программисту с опытом быстро изучить Java?
Как рендерить html в pdf c выполнением скриптов в html?
Как из Java вызвать SOAP метод с NTLMv2 аторизацией?
AdRiver
Компания дня
Яндекс
Яндекс
Последняя публикация: Как Яндекс строил дата-центр с нуля

15291 подписчик
Встраиваем бэкдор в публичный ключ RSA Удивительное устройство USB-флешки Kingston DataTraveler DT6000 и восстановление информации, утраченной в результате сбоя Если Seagate запылился…
Brainstorage
Разработчик тестов по программированию
Front-end Developer
Дизайнер iOS/web интерфейсов
Разработчик Unity/C# (интерактивные инсталляции)
Системный администратор-маковод
Senior Frontend-разработчик
Тестировщик
Ведущий iOS разработчик (Мобильный поиск)
PHP-разработчик
Веб разработчик / Middle web developer
все вакансии
Инструмент для работы с данными VK API
Вёрстка для WordPress
Редизайн логотипа
Очень простой (без единой картинки) одностраничник на Bootstrap (?)
PHP разработчик, знающий фреймворк Symfony
Упорядочить товары на сайте, задать характеристики группам товаров
Пролайкать сайт
Нарисовать с прототипа экранов приложения,
Консультант по DevExpress MVC
Создание сайта Управляющей Компании
все заказы
Войти
Регистрация
Разделы
Публикации
Хабы
Компании
Пользователи
Q&A
Песочница
Инфо
О сайте
Правила
Помощь
Соглашение
Услуги
Реклама
Спецпроекты
Тарифы
Контент
Семинары
Разное
Приложения
Тест-драйвы
Помощь стартапам
© TM

Служба поддержки

Мобильная версия



