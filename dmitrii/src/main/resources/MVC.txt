http://rsdn.ru/forum/design/5406934.1
http://www.sql.ru/forum/1066601/vopros-o-pravilnoy-realizacii-patterna-mvc
В классической реализации MVC основные принципы такие:
1. Слабое связывание
2. Модель ничего не знает ни о ком. Модель рассылает оповещения,
которые может слушать, например, Вид, если хочет.
3. Вид знает о модели но не может её менять, вид может манипулировать контроллером
4. Контроллер знает о Модели и может её менять, а также знает о Виде (или Видах) и может его (их) менять.

1) Управление приходит в Controller
2) Controller пинает Model
3) Controller передает данные на view
4) View генерит HTML
5) Model — все что не GUI
View полностью отделили от Model (негоже из разметки страниц лезть в базу)
Model — объект, не база данных, не remote proxy, а обычный кусок памяти и набор методов.


MVC pattern - пример

public class Student {
 private String rollNo;
 private String name;
 public String getRollNo() {
 return rollNo;
 }
 public void setRollNo(String rollNo) {
 this.rollNo = rollNo;
 }
 public String getName() {
 return name;
 }
 public void setName(String name) {
 this.name = name;
 }
}

public class StudentView {
 public void printStudentDetails(String studentName, String
studentRollNo){
 System.out.println("Student: ");
 System.out.println("Name: " + studentName);
 System.out.println("Roll No: " + studentRollNo);
 }
}

public class StudentController {
 private Student model;
 private StudentView view;

 public StudentController(Student model, StudentView view){
 this.model = model;
 this.view = view;
}

 public void setStudentName(String name){
 model.setName(name);
 }

 public String getStudentName(){
 return model.getName();
 }

 public void setStudentRollNo(String rollNo){
 model.setRollNo(rollNo);
 }

 public String getStudentRollNo(){
 return model.getRollNo();
 }

 public void updateView(){
 view.printStudentDetails(model.getName(), model.getRollNo());
 }
}

public class MVCPatternDemo {
 public static void main(String[] args) {

 //fetch student record based on his roll no from the database
 Student model = retriveStudentFromDatabase();

 //Create a view : to write student details on console
 StudentView view = new StudentView();

 StudentController controller = new StudentController(model, view);

 controller.updateView();

 //update model data
 controller.setStudentName("John");

 controller.updateView();
 }

 private static Student retriveStudentFromDatabase(){
 Student student = new Student();
 student.setName("Robert");
 student.setRollNo("10");
 return student;
 }
}