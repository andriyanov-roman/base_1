Классы Date, Calendar, DateFormat
Date
Класс Date предназначен для работы с текущими датой и временем и позволяет отталкиваться от них для решения своих задач.
При выходе новых версий Java часть методов класса была перемещена в классы Calendar и DateFormat.

При импорте выбирайте java.util.Date, а не java.sql.Date.

У класса есть два конструктора:

Date()
Date(long milliseconds)
Первый конструктор без параметров инициализирует объект текущей датой и временем.
Во втором конструкторе вы можете указать количество миллисекунд, прошедших с полуночи 1 января 1970 года.

Методы:

boolean after(Date date) - если объект класса Date содержит более позднюю дату, чем указано в параметре, то возвращается true
boolean before(Date date) - если объект класса Date содержит более раннюю дату, чем указано в параметре, то возвращается true
int compareTo(Date date) - сравнивает даты. Возвращает 0, если совпадают, отрицательное значение - если вызывающая дата более ранняя, положительное значение - если вызывающая дата более поздняя, чем в параметре
boolean equals(Object object) - если даты совпадают, то возвращается true
long getTime() - возвращает количество миллисекунд, прошедших с полуночи 1 января 1970 года
void setTime(long milliseconds) - устанавливает время и дату в виде числа миллисекунд, прошедших с полночи 1 января 1970 года.
Если вы посмотрите документацию, то увидите, что существует множество методов для получения или установки отдельных компонентов времени и даты, например, getMinutes()/setMinutes() и др. Все они являются устаревшими и вместо них следует использовать класс Calendar.

Простой пример вывода даты на экран.

// Создадим объект Date
Date date = new Date();

textViewInfo.setText(date.toString());
С помощью метода getTime() можно отобразить количество миллисекунд, прошедших с 1 января 1970 года. Обновим пример

// Создадим объект Date
Date date = new Date();

long millis = date.getTime();

textViewInfo.setText(String.valueOf(millis));



Calendar
Абстрактный класс Calendar позволяет преобразовать время в миллисекундах в более удобном виде - год, месяц,
день, часы, минуты, секунды. Существуют также подклассы, например, GregorianCalendar.

Переменная типа boolean под именем areFieldsSet указывает, были установлены компоненты времени.
Переменная fields - это массив целочисленных значений, содержащий компоненты времени.
Переменная isSet - массив типа boolean, указывающий, был ли установлен специфический компонент времени.
Переменная time (тип long) содержит текущее время объекта.
Переменная isTimeSet (тип boolean) указывает, что было установлено текущее время.

У класса много методов. Вкратце опишем часть из них:

abstract void add(int field, int value) - добавляет value к компоненту времени или даты, указанному в параметре field (например, Calendar.HOUR). Чтобы отнять, используйте отрицательное значение.
boolean	after(Object calendar) - возвращает значение true, если вызывающий объект класса Calendar содержит более позднюю дату, чем calendar.
boolean	before(Object calendar) - возвращает значение true, если вызывающий объект класса Calendar содержит более раннюю дату, чем calendar.
final void clear() - обнуляет все компоненты времени в вызывающем объекте.
final void clear(int field) - обнуляет компонент, указанный в параметре field
int get(int field) - возвращает значение одного компонента, например, Calendar.MINUTE
synchronized static Locale[] getAvailableLocales() - возвращает массив объектов класса Locale, содержащий региональные данные
synchronized static Calendar getInstance() - возвращает объект класса Calendar для региональных данных и часового пояса по умолчанию. Есть и другие перегруженные версии.
final Date getTime() - возвращает объекта класса Date, содержащий время, эквивалентное вызывающему объекту
TimeZone getTimeZone() - возвращает часовой пояс
final boolean isSet(int field) - возвращает значение true, если указанный компонент времени указан.
void set(int field, int value) - устанавливает компоненты даты или времени. Есть перегруженные версии
final void setTime(Date date) - устанавливает различные компоненты даты и времени через объект класса Date
void setTimeZone(TimeZone timezone) - устанавливает часовой пояс через объект класса TimeZone
Также в календаре определены много различных констант: AUGUST и другие месяцы, SATURDAY и другие дни недели, HOUR и т.д.

GregorianCalendar
Класс GregorianCalendar является подклассом Calendar, который представляет обычный Григорианский календарь. Метод getInstance() класса Calendar обычно возвращает объект класса GregorianCalendar, инициированный текущей датой и временем согласно региональным настройкам.

У класса есть два поля AD и BC - до нашей эры и наша эра.

Кроме стандартных методов, которые есть в классе Calendar, у GregorianCalendar есть метод isLeapYear() для проверки високосного года.


boolean isLeapYear(int year)
Если год високосный, то возвращается true.

Отсчёт месяцев идёт от нуля, поэтому декабрь будет одиннадцатым месяцем. Чтобы не путаться с такими случаями, проще использовать понятные константы:


GregorianCalendar calendar = new GregorianCalendar(1975,
		Calendar.DECEMBER, 31);
А получать нужные отрезки времени можно через метод get(). Например, узнать, какой месяц содержится в созданной нами дате можно так:


int month = calendar.get(Calendar.MONTH);
System.out.println(month); // вернёт 11
Изменить состояние объекта можно через метод set(). Например, установим новую дату у нашего объекта.


GregorianCalendar calendar = new GregorianCalendar(1975,
		Calendar.DECEMBER, 31);
calendar.set(1976, Calendar.FEBRUARY, 23);
// Убедимся, что возвращает 1 - февраль
System.out.println(calendar.get(Calendar.MONTH));
Можно сдвинуть дату на определённый период с помощью метода add(). Отодвинем дату на два месяца.


GregorianCalendar calendar = new GregorianCalendar(1975,
		Calendar.DECEMBER, 31);
calendar.add(Calendar.MONTH, 2);
System.out.println(calendar.get(Calendar.MONTH));
Методы getTime() и setTime() работают с объектами Date и полезны для преобразования.


GregorianCalendar calendar = new GregorianCalendar(year, month, day);
Date hireDay = calendar.getTime();
TimeZone
Класс TimeZone позволяет работать с часовыми поясами, смещёнными относительно Гринвича, также известного универсальное глобальное время (UTC). Класс также учитывает летнее время.

SimpleTimeZone
Класс SimpleTimeZone - подкласс класса TimeZone и позволяет работать с часовыми поясами в Григорианском календаре.

Класс DateFormat
Класс DateFormat является абстрактным классом, с помощью которого можно форматировать и анализировать показания даты и времени. метод getDateInstance() возвращает экземпляр класса DateFormat, который может форматировать информацию о дате.

Чаще всего используется метод format(), позволяющий вывести дату в нужном формате.

Класс SimpleDateFormat
Класс SimpleDateFormat является подклассом класса DateFormat и позволяет определять собственные шаблоны форматирования для отображения даты и времени.

Символы форматирования строки

A - AM или PM
d - день месяца (1-31)
D - день в году (1-366)
H - часы в формате AM/PM (1-12)
K - часы в формате суток (1-24)
M - минуты (0-59)
S - секунды (0-59)
W - неделя в году (1-53)
y - год
z - часовой пояс
и так далее.